---
const id = `moon-mask-`
---

<starlight-rapide-theme-select>
  <button aria-label="ok" aria-live="polite" class="sl-flex" title="ok">
    <div class="i-ph-sun dark:hidden w-5 h-5"></div>
    <div class="i-ph-moon hidden dark:block w-5 h-5"></div>
  </button>
</starlight-rapide-theme-select>

<style>
  starlight-rapide-theme-select {
    --sl-rapide-theme-select-animation-duration: 400ms;
    --sl-rapide-theme-select-ease-elastic: cubic-bezier(0.5, 1.25, 0.75, 1.25);

    display: flex;
    align-items: center;
  }

  button {
    align-items: center;
    background-color: transparent;
    border: none;
    cursor: pointer;
    height: 2rem;
    width: 2.25rem;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    border-radius: 0.375rem;
  }

  /* Phosphor icons with simple transitions */
  .i-ph-sun,
  .i-ph-moon {
    transition: all 0.2s ease;
  }
</style>

<script>
  type Theme = "auto" | "dark" | "light";

  /** Key in `localStorage` to store color theme preference at. */
  const storageKey = "theme";

  /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
  function parseTheme(theme: unknown): Theme {
    return theme === "auto" || theme === "dark" || theme === "light"
      ? theme
      : "auto";
  }

  /** Load the user’s preference from `localStorage`. */
  function loadTheme(): Theme {
    return parseTheme(
      typeof localStorage !== "undefined" && localStorage.getItem(storageKey),
    );
  }

  /** Store the user’s preference in `localStorage`. */
  function storeTheme(theme: Theme): void {
    if (typeof localStorage !== "undefined") {
      localStorage.setItem(
        storageKey,
        theme === "light" || theme === "dark" ? theme : "",
      );
    }
  }

  /** Get the preferred system color scheme. */
  function getPreferredColorScheme(): Theme {
    return matchMedia("(prefers-color-scheme: light)").matches
      ? "light"
      : "dark";
  }

  /** Update select menu UI, document theme, and local storage state. */
  function onThemeChange(theme: Theme): void {
    document.documentElement.dataset["theme"] =
      theme === "auto" ? getPreferredColorScheme() : theme;

    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    storeTheme(theme);
  }

  // React to changes in system color scheme.
  matchMedia(`(prefers-color-scheme: light)`).addEventListener("change", () => {
    if (loadTheme() === "auto") onThemeChange("auto");
  });

  customElements.define(
    "starlight-rapide-theme-select",
    class StarlightRapideThemeSelect extends HTMLElement {
      constructor() {
        super();
        onThemeChange(loadTheme());
        const button = this.querySelector("button");
        button?.addEventListener("click", () => {
          const theme = parseTheme(document.documentElement.dataset["theme"]);
          const newTheme =
            theme === "dark" ? "light" : theme === "light" ? "dark" : "auto";
          onThemeChange(newTheme);
          button?.setAttribute("aria-label", `${newTheme} theme`);
        });
      }
    },
  );
</script>
