<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kratos&apos;s blog</title><description>Kratos&apos;s blog</description><link>https://blog.kratosmy.uk/</link><item><title>网络众生相</title><link>https://blog.kratosmy.uk/posts/zhuang-zi-qi-wu-lun/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/zhuang-zi-qi-wu-lun/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;大知闲闲，小知閒閒。大言炎炎，小言詹詹。其寐也魂交，其觉也形开。与接为构，日以心斗。缦者、窖者、密者。小恐惴惴，大恐缦缦。其发若机栝，其司是非之谓也；其留如诅盟，其守胜之谓也；其杀如秋冬，以言其日消也；其溺之所为之，不可使复之也；其厌也如缄，以言其老洫也；近死之心，莫使复阳也。喜怒哀乐，虑叹变慹，姚佚启态。乐出虚，蒸成菌。日夜相代乎前而莫知其所萌。已乎，已乎！旦暮得此，其所由以生乎！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;译文：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大智的人广博雅致，小智的人固执偏狭；高谈阔论的人盛气凌人，具体而论的人争辩不休。他们睡觉时魂魄也不安宁，等睡醒后身疲气散。他们整天与外界交涉纠缠，日复一日勾心斗角。有的散漫不经，有的藏奸不露，有的谨慎精细。小惧怕时惴惴不安，大恐惧时惊魂失魄。他们有时发言就像放出的利箭，窥伺到别人的是非来进行攻击；他们有时片语不吐就像发过誓约一样，不过是等待致胜的机会；他们正在衰竭着，犹如秋冬的萧条，这是说他们一天天地走向消亡；他们沉溺于辩论的作为中，不可能使他们再恢复本然之性；他们心灵闭塞，如同被绳索束缚，这说明他们已如废旧的沟洫，源头之水已经枯竭了；走向死亡的心灵，再也没有办法使他们恢复生机了。他们时而欣喜，时而愤怒，时而悲哀，时而快乐；有时多虑，有时感叹，有时后悔，有时恐惧；有的轻浮，有的放纵，有的张狂，有的作态；就像音乐从虚空的东西里发出来的一样，又像菌类被地气蒸发出来的一样。这种种情绪和心态日夜变化着，时不时更替出现，但却不知是从哪里萌生的。算了吧，算了吧！一旦得知这些情态从哪里产生，也就明白这些情态之所以产生的根由了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上节选自《&lt;strong&gt;&lt;em&gt;庄子·内篇·齐物论&lt;/em&gt;&lt;/strong&gt;》，愚以为，网络众生相莫过于此。&lt;/p&gt;
</content:encoded></item><item><title>程序员与螃蟹</title><link>https://blog.kratosmy.uk/posts/crab-and-programmer/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/crab-and-programmer/</guid><content:encoded>&lt;p&gt;前几天和老婆吃小杨生煎的时候谈到现在的蟹粉生煎没啥味道了，由此联想到自己以及程序员群体。&lt;/p&gt;
&lt;p&gt;每年的三至五月是螃蟹活跃的时候，清明回家也是吃到上火，渐渐的现在超市基本看不到螃蟹的身影了，就算有也是小小的，没有让人购买的欲望。可怜螃蟹一年的高光时刻也只是这几个月，还是以付出生命为代价的。&lt;/p&gt;
&lt;p&gt;而程序员群体，在互联网行业兴起的时候，有些人为了所谓好的环境，或者光环，来到了所谓的互联网大厂，入职就一套顶配的Mac还有4k显示器，这就好像那些大型养殖场，里面的螃蟹每天都有人喂吃的，也基本不用担心天敌，蟹塘四周绿意盎然，一片欣欣向荣的样子。但是这些螃蟹被养的这么肥的结果就是上了人们的餐桌，互联网大厂员工的结果大都也是在自己最年轻能干的时候输出自己的光和热，写了一堆代码，做出了一堆产品，但最后被记住的只有老板。&lt;/p&gt;
&lt;p&gt;而有些程序员，可能自己能力也很强，但是选择自己创业。这就好比有些螃蟹自给自足，可能会遇到天敌直接被吃了，也有可能会活得很好，自身能力也很全面。&lt;/p&gt;
&lt;p&gt;但大部分人，去不了大厂，也没能力创业，去了家小公司，就像一些小的养殖场，自己都朝不保夕，又怎么指望他把你养好呢？&lt;/p&gt;
&lt;p&gt;我讲的是程序员群体，但能不能扩大到更大的群体呢？我想是能的。&lt;/p&gt;
</content:encoded></item><item><title>2023年观影记录</title><link>https://blog.kratosmy.uk/posts/movie-record-2023/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/movie-record-2023/</guid><content:encoded>&lt;h1&gt;2023 年看过的电影&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;无间道三部曲
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;谁都不能信&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三方国界
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;哪个国家的退伍军人过的快乐？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;猎头游戏
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;男主能藏粪坑也是个狠人&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;狗神
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;影院看的，直到字幕完全结束才有人离场，这是我见过的第一次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;军舰岛
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;内部不够团结成为了抗日的很大阻力，这部韩国电影很深刻地指出了这一点，我们的抗日电影呢？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;坚如磐石&lt;/li&gt;
&lt;li&gt;93国际列车大劫案：莫斯科行动&lt;/li&gt;
&lt;li&gt;涉过愤怒的海
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;每一位家长都该看看&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第八个嫌疑人
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;致敬每一位兢兢业业的人民警察&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;杀手
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Stick to your plan, trust no one&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stick to the plan, forbid empathy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stick to the plan, anticipate, don&apos;t improvise&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stick to your plan, never yield advantage&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stick to the plan, fight only the battle you&apos;re paid to fight, ask yourself, what&apos;s in it for me?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stick to the plan, empathy is weakness, weakness is vulnerability&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;This is what it takes if you want to succeeed&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Simple.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;河边的错误
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;究竟是时代的错误还是人的错误？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伸冤人3
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;丹泽尔·华盛顿老了，西西里岛养老了&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;威尼斯惊魂夜
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;不如前两部&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;窗台上的男人&lt;/li&gt;
&lt;li&gt;奥本海默
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;物理与政治&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控方证人
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;男人想要的太多，女人想要的只有爱情&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;谍之心
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;浪费时间的电影&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;孤注一掷
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;该被骗的人还是会被骗&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;剑鱼行动&lt;/li&gt;
&lt;li&gt;变脸
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;和《剑鱼行动》一样，只能感叹凯奇叔和特拉沃尔塔都老了&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;巨齿鲨2&lt;/li&gt;
&lt;li&gt;搏击俱乐部
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;把我心里想的都拍出来了&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;守法公民&lt;/li&gt;
&lt;li&gt;惊天营救2&lt;/li&gt;
&lt;li&gt;少数派报告
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;当人们用一个系统控制另一个系统时，如何保证系统本身的稳定性？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锅匠，裁缝，士兵，间谍
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;第一遍真没看懂，复杂的人物关系似乎也揭示了冷战时代比全面战争更为恐怖&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;永生战士
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;搜了下真的有个芬兰战神&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;猫鼠游戏
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;真事改编，我们可以吗？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;催眠&lt;/li&gt;
&lt;li&gt;心迷宫
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;人性本恶&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;疾速追杀4
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;看前几部的时候我一直想知道“高桌”究竟是怎样一群人，现在我知道了，“规则”即“高桌”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;速度与激情10&lt;/li&gt;
&lt;li&gt;盟约
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;战争中建立的信任弥足珍贵&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逃离德黑兰&lt;/li&gt;
&lt;li&gt;银河护卫队3&lt;/li&gt;
&lt;li&gt;龙与地下城：侠盗荣耀&lt;/li&gt;
&lt;li&gt;灌篮高手&lt;/li&gt;
&lt;li&gt;红雀&lt;/li&gt;
&lt;li&gt;大而不倒
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;几百年的资本积累，怎么倒？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无名&lt;/li&gt;
&lt;li&gt;杀死福顺&lt;/li&gt;
&lt;li&gt;网络迷踪2
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;拍摄手法确实新颖，这就给我的google账号来个双重认证&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;虽然只是弄丢了手机
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;剧情挺老套的，但是电影里人人都在低头看手机的场景却很瘆人&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2023 年看过的电视剧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;万神殿
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;对人工智能乃至整个宇宙的探讨，相当深刻&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拾荒者统治
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;想象力的巅峰，人类的渺小&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;洛基-第二季
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;近年漫威难得的好剧&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尸体
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;穿越时空的调查&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;劫机7小时
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;练好口才走遍天下都不怕&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;秘密入侵&lt;/li&gt;
&lt;li&gt;黑暗荣耀
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;为什么每部韩剧都是虎头蛇尾，最后来个爽文结局？？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硅谷
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;创业艰辛，老实打工&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>&lt;我本不该成为母亲&gt;读后感</title><link>https://blog.kratosmy.uk/posts/the-push/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/the-push/</guid><content:encoded>&lt;h2&gt;关于书名&lt;/h2&gt;
&lt;p&gt;这本书英文叫做《The Push》， 译者将其翻译为《我本不该成为母亲》我认为略有偏颇，最然这句话出自文章本身，但不如英文原名深刻且简洁。同时，&amp;quot;The Push&amp;quot;
其实也是全书的一个核心悬疑部分--究竟是不是书中的小女孩，维奥莱特，亲手把她的亲弟弟的婴儿车推向路中央从而酿成惨剧？&lt;/p&gt;
&lt;h2&gt;母亲的身份&lt;/h2&gt;
&lt;p&gt;当一个女性还在她母亲的子宫里时，她自己的子宫里也已经有了卵子，也就是说，母亲和女儿在同一个子宫中被孕育。此书用这句话作为扉页，其实也挑明了一个问题--
女性获得母亲这一身份并非自愿。不是所有女孩都必须通过成为母亲，才能使她们的生命完备。将女性的价值捆绑在母亲的身份之上，是对女性自身意义的亵渎和屠杀。&lt;/p&gt;
&lt;h2&gt;婚姻&lt;/h2&gt;
&lt;p&gt;书里几乎提到了一切婚姻中会遇到的事，初恋时的甜蜜，婚后的琐碎，以及丈夫的外遇，让人不禁感叹：“Such is Life.”&lt;/p&gt;
&lt;h2&gt;败笔&lt;/h2&gt;
&lt;p&gt;其实不是很理解为什么要写那个反社会人格的孩子，正如一个豆瓣说的，婚姻本身就已足够残忍，而这个孩子的性格的产生也似乎无法溯源，比较突兀。&lt;/p&gt;
</content:encoded></item><item><title>Git快速入门</title><link>https://blog.kratosmy.uk/posts/fast-git-introduction/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/fast-git-introduction/</guid><content:encoded>&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;p&gt;大部分和Git有关的文章都在告诉你Git有哪些命令，如何使用它们可以加速你的开发进程，但很少有人探讨Git的内部原理。&lt;/p&gt;
&lt;p&gt;先考虑Git仓库的三个基本概念：Blob， Tree，Commits。&lt;/p&gt;
&lt;h3&gt;Blob&lt;/h3&gt;
&lt;p&gt;Blob是二进制大对象的缩写。
以下是ChatGPT的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blob是Git中存储文件内容的基本对象之一。&lt;/li&gt;
&lt;li&gt;每个Blob对象由文件内容和SHA-1哈希值来标识。&lt;/li&gt;
&lt;li&gt;Blob对象与Git的树对象和提交对象一起构成了Git的三个基本对象类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tree&lt;/h3&gt;
&lt;p&gt;Git使用树对象来存储文件夹。每棵树都包含一组子树（子文件夹）或者Blob（文件）。它同样通过哈希值来标识，值得注意的是，
任何一个子文件的修改都会导致根树的哈希值改变，可谓牵一发而动全身。&lt;/p&gt;
&lt;h3&gt;Commits&lt;/h3&gt;
&lt;p&gt;Commits是由Tree和其他一些元数据组成，同样通过哈希值标识。&lt;/p&gt;
&lt;h2&gt;Git操作相关概念&lt;/h2&gt;
&lt;h3&gt;Ref&lt;/h3&gt;
&lt;p&gt;Git里通过一个有向无环图来指示一组Ref（空指针为起点），这些引用主要是方便人们查阅，因为哈希值太长了。比如HEAD Ref就是指向最近一次的提交。&lt;/p&gt;
&lt;h3&gt;三个区域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Working Directory：表示当前正在使用的目录；&lt;/li&gt;
&lt;li&gt;Staging Area： 也可以理解为缓存或者索引，里面暂存你的更改；&lt;/li&gt;
&lt;li&gt;Repository：通过Commit Staging Area里的内容，得到Git Directory，也叫树或者数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Merge与Rebase&lt;/h3&gt;
&lt;p&gt;中文翻译为合并与变基，字面即可理解，下面适当展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git Merge会保留原始的Commits，然后会有一个新的Commit指向HEAD，里面可能会包含一些为解决冲突而产生的新代码。&lt;/li&gt;
&lt;li&gt;Git Rebase会复制原始的Commits，然后以旧的HEAD为起点继续向后添加新节点，这样可以保证这个DAG图保持一个直线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下，Rebase更加推荐使用，这样你的Commit会“脱颖而出”（&amp;quot;the cream rises to the top&amp;quot;），但也要注意，如果其他人
在基于你的Commit进行开发，那么尽量不要使用Rebase。&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;最后的最后，尽量使用Intellij开发，因为他的Local History真的可以救命，有时候&lt;code&gt;git reflog&lt;/code&gt;也不一定管用。&lt;/p&gt;
</content:encoded></item><item><title>如何做技术笔记</title><link>https://blog.kratosmy.uk/posts/how-to-do-technical-notes/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/how-to-do-technical-notes/</guid><content:encoded>&lt;h2&gt;什么是技术笔记&lt;/h2&gt;
&lt;p&gt;平时开发或者阅读书籍、博客的时候，很多东西看过没多久就会忘记，很多人会选择一个笔记软件，比如 Notion、Obsidian 等，把学到的记录下来，这就是技术笔记。&lt;/p&gt;
&lt;h2&gt;为什么不要记笔记&lt;/h2&gt;
&lt;p&gt;也有一些人持有不需要记笔记的观点，认为我们一辈子读的大部分书都是没意义的，或者你可以通过搜索引擎很轻松地找到需要的知识，甚至都不需要放到浏览器书签里。事实上确实很多人记完笔记就很少再看第二遍了。&lt;/p&gt;
&lt;h2&gt;到底该不该记笔记&lt;/h2&gt;
&lt;p&gt;我个人的观点是，只针对程序员，要记，但有几个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;笔记要遵循自己的思路加工总结后输出，方便在脑中按图索骥；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;笔记不仅仅是记录知识，也可以是问题、心路历程等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;笔记要方便检索，这点我相信用好 Obsidian 没什么问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>思考是一种特权</title><link>https://blog.kratosmy.uk/posts/thinking-is-a-privilege/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/thinking-is-a-privilege/</guid><content:encoded>&lt;p&gt;这两天在论坛上看到一个帖子，其中提到一句话：“如果你买不起 Mac，去不了美国，未来也买不起 Mac，去不了美国。自然只能靠着网上的信息构建自己的认知，大概率会选择自己喜欢的信息进行构建。如果你的信息源就是错误的，越思考越错。”&lt;/p&gt;
&lt;p&gt;底下有人附和，但更多的是阴阳怪气。&lt;/p&gt;
&lt;p&gt;我看到这句话后，知道楼主在说什么，但他确实表达能力不是很好。我这里扩展一下，就当话题作文了。&lt;/p&gt;
&lt;p&gt;在互联网时代，大家似乎都习惯了有事没事打开手机，刷刷这个，刷刷那个，得益于推荐算法的日益成熟，每个 App 上都有一个属于你自己的“矩阵”，也就是“用户画像”。学过线性代数的都应该知道，每个矩阵都有自己的特征矩阵，是的，这就是推荐算法的核心。&lt;/p&gt;
&lt;p&gt;于是这些“矩阵”就像一个个数字牢笼一样，把手机前的你困住的同时还让你不自知。回到开头的话题，楼主的意思其实是：很多人无脑喷 Mac 或者 Windows，但那些人甚至都没自己买一台亲身去实践，就通过信息茧房得到了自己的“思考”，看到一条和自己想法一致的评论，就心满意足地滑开，同时忽视其他和他意见不一致的评论。&lt;/p&gt;
&lt;p&gt;现在网络上到处都在鼓吹“润”，但当我在现实生活中和那些在美国生活过的人聊过天会发现，美国没那么好，中国也没那么差。最近，当公司有 Transfer 到其他国家的机会的时候，很多人又变得不情愿了，因为他们不得不开始考虑国外的工资、税、房价、便利程度、有身份和没身份的区别、拿身份需要多久等等因素，当考虑完这一切他们就会觉得，好像国内还好一点。而那些鼓吹“润”的人，有多少会打开 Zillow 看看旧金山、温哥华的房价？&lt;/p&gt;
&lt;p&gt;另外一个例子，之前在腾讯的时候，绩效分五档，在脉脉上或者公司内部论坛上大家都觉得四五星是好的，大部分都是三星，二星就该离职了，但当我走之前和组长聊过才知道，总监评绩效的时候，往往会给那些勤劳加班的年轻人四五星和一般的年终奖，给自己真正的嫡系三星和丰厚的年终。原因在于年轻人喜欢面上的东西，而老人喜欢实在的，只有这些老人嫡系才能稳固总监的地位，加班的人拿四五星可以让大家更“卷”，当然了，前提是这些人本身能力也不差。然而这种事实往往没人会告诉你，更多情况是你身边和你一样拿三星的人会假惺惺地配合你一起抱怨不公，一起骂那些拿四星的人凭什么，但他们永远不会告诉你他真实的年终奖数字。&lt;/p&gt;
&lt;p&gt;这两个例子多少有点身边统计学了，不过至少也说明了一点，你想从网上找到有用的信息，无异于沙里淘金，运气好淘到了，运气不好浪费了大把时间，如果你甚至还去和其他人讲道理，那只会让这个数字牢笼把你困的越来越紧。&lt;/p&gt;
&lt;p&gt;最近 ChatGPT 很火，大家都觉得这玩意是“革命性的”。但以我个人愚见，它也只是一个聊天机器人，只不过搜集信息、归纳信息的能力更强，适用的场景更广泛了，最重要的一点，它不会独立思考。我比较悲观，觉得这个瓶颈在可预见的未来依然无法被突破，&lt;a href=&quot;https://yoshuabengio.org/research/&quot;&gt;Yoshua Bengio&lt;/a&gt; 老爷子可能要抱憾离世。&lt;/p&gt;
&lt;p&gt;所以啊，我们人类依然拥有思考的特权。放下手机，看看先贤们的书，然后安心地睡个好觉吧。&lt;/p&gt;
</content:encoded></item><item><title>2022年观影记录</title><link>https://blog.kratosmy.uk/posts/movie-record-2022/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/movie-record-2022/</guid><content:encoded>&lt;h1&gt;2022 年看过的电影&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;康斯坦丁
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;这部电影让我真正戒了烟。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;未来战警&lt;/li&gt;
&lt;li&gt;不
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;乔丹·皮尔经典的种族议题外加对好莱坞日薄西山的叹息。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鹰眼&lt;/li&gt;
&lt;li&gt;心灵传输者
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;小时候就会做梦梦到的超能力，不用坐飞机就可以全世界旅行可太美好了。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悲情三角
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;当一个女性掌握权力后，她也开始颐指气使，霸占帅气的男性。人类身处某个位置时，自然会做出一些出于本能的行为，这与性别无关，这是人类的可悲。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上帝的笔误
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;我假装自己是精神病人去了一家精神病院，实际目的是查案，但我最后却要努力证明自己没有精神病。而影片的最后十秒告诉我，我就是有精神病。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阿凡达：水之道
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;殖民国家还是那么喜欢忏悔。没办法，观众爱看。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;年鉴计划&lt;/li&gt;
&lt;li&gt;天才计划
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;经典种族议题。哈利·波特也老了。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利刃出鞘 2
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;难得的能超越第一部的电影。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;冥界警局&lt;/li&gt;
&lt;li&gt;福尔摩斯小姐： 伦敦厄运&lt;/li&gt;
&lt;li&gt;分手的决心
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;朴赞郁的镜头语言可以说是如诗般唯美。汤唯将那种压抑的爱表现地淋漓尽致。“摧毁一个男人的最佳方式就是成为他的一部分，然后消失在这个世界上。”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我记得
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;南韩复仇片流水线合格产品。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;黑亚当&lt;/li&gt;
&lt;li&gt;共助 2：国际&lt;/li&gt;
&lt;li&gt;三千年的渴望
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;三千年的等待其实是女人的等待。但很抱歉无法共情。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;黑洞频率
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;二十年前的科幻片，其中父子亲情让人感动。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;天方异谈
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;国产科幻片，第三个故事细思极恐。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个小忙
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;一个看上去人畜无害、热心、总受欺负的女人，一个凭一己之力闯出自己的事业并且能下手杀了自己亲妹妹的女人，前者却更狠。男人在片中沦为玩物。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;暗夜狼人&lt;/li&gt;
&lt;li&gt;狩猎
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;李政宰转型导演的处女作，意外中的好看。顺便感叹下全斗焕时期可真是韩国电影取之不尽的故事来源。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子弹列车
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;大牌云集的喜剧动作片，顺便一提，这部电影的导演曾经是主演布拉德皮特的替身。另外《Five Hundred Miles》真好听。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;壮志凌云 2： 独行侠
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;美利坚征兵宣传片，但是真的看得我热血沸腾。汤姆·克鲁斯依旧那么帅。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雷神 4： 爱与雷霆
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;看得出来漫威第四阶段只想摆烂了，不过确实起到了承前启后的作用，片中引出的创世神明“永恒”还有“生命法庭”等角色期待在第五阶段给予更大篇幅。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;坠落
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;《活埋》是在地下，《坠落》是在电视塔顶，都是演员少但效果好的电影。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;神探大战
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;韦家辉老了，刘青云也老了。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日班猎人&lt;/li&gt;
&lt;li&gt;明日战记&lt;/li&gt;
&lt;li&gt;幕后玩家&lt;/li&gt;
&lt;li&gt;铁血战士：猎物
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;谁才是猎人，谁才是猎物？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;灰影人&lt;/li&gt;
&lt;li&gt;犯罪都市 2&lt;/li&gt;
&lt;li&gt;魔女 2&lt;/li&gt;
&lt;li&gt;大空头
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;需要一定金融基础，不过看得很过瘾。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;奇异博士 2： 疯狂多元宇宙
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;导演拍过美版《咒怨》，恐怖元素不少。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;蜘蛛头&lt;/li&gt;
&lt;li&gt;侏罗纪世界 3&lt;/li&gt;
&lt;li&gt;目中无人
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;期待第二部，武侠是属于中国的，好的武侠电影也会回来的。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;瞬息全宇宙
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;杨紫琼有望拿奥斯卡影后了。另外，不知道那些湾区华裔双码农父母的子女靠被打鸡血长大后看到这部电影作何感想？还是根本就不让看？&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;刺猬索尼克 2
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;第一部第二部都是是和墨墨一起看的，怀念 4399 小游戏还有金·凯瑞哈哈。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恶霸警察
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;压抑、压抑&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;神秘海域&lt;/li&gt;
&lt;li&gt;承包商&lt;/li&gt;
&lt;li&gt;套装
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;小小裁缝店，上演了一出又一出好戏。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;月球陨落&lt;/li&gt;
&lt;li&gt;蜘蛛侠：英雄无归&lt;/li&gt;
&lt;li&gt;亚当计划&lt;/li&gt;
&lt;li&gt;尼罗河上的惨案
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;冲着肯尼斯·布拉纳和盖尔·加朵才去电影院贡献票房的，实际拍得确实一般。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;王牌特工：源起
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;不如前几部。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;误杀 2
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;不如第一部。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;古董局中局&lt;/li&gt;
&lt;li&gt;永恒族
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;天神族审判者阿里瑟姆出场时确实震撼。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2022 年看过的电视剧&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;完美伴侣
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;相对真实。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;边缘世界 第一季
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;《三体》真应该和它学学什么叫做科幻电影的质感，而这部剧甚至都不如《最后生还者》的第三集。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;塔尔萨之王 第一季
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“大学学历的意义在于告诉用人单位，你能够连续四年坚持不懈的按时完成一系列任务，如果雇佣了你，你会每天准时来上班，不会搞砸他的生意。”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;吉尔莫·德尔·托罗的奇思妙想
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;我至今都害怕醒来时看到床头站着一个小男孩盯着我。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伦敦黑帮 第一季、第二季&lt;/li&gt;
&lt;li&gt;小小姐们
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;高开低走，依然落入韩国控诉财阀类题材流水线电影的窠臼。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;苏里南
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;韩版《毒枭》。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;超蓬勃：优步之战 第一季
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;quot;Are you an asshole?&amp;quot; &amp;quot;Yes.&amp;quot; &amp;quot;You are hired.&amp;quot; 感叹 Travis 的魄力和 Anthony Levandowski 的天才。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;爱，死亡和机器人 第一季、第二季、第三季
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;科幻动画的天花板。人只有两个笔画，却比一切事物都复杂。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开端&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>&lt;克拉拉与太阳&gt;读后感</title><link>https://blog.kratosmy.uk/posts/clara-and-the-sun/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/clara-and-the-sun/</guid><content:encoded>&lt;h2&gt;写在之前的话&lt;/h2&gt;
&lt;p&gt;很久没写过读后感了，上次写应该还是在高中，从小学到高中读过很多书和期刊，也正是这些书塑造了我的一部分人格，所以我必须感谢这些书，以及给予我阅读条件的爸妈、外婆、老师。&lt;/p&gt;
&lt;p&gt;关于《克拉拉与太阳》这本书，从买回来到读完，花了快一年，深圳买来，上海读完，期间也换了工作，经历了似乎发生了很多事又似乎什么都没发生的 2022 年。&lt;/p&gt;
&lt;p&gt;至于我为什么花了一年才读完，相信现代人很能理解，因为手机和电脑已经占据了我们的工作与生活，重新拿起纸质书本就不容易。但仔细一想，其实每天读一些也能很快读完，说到底还是自己懒，但毕竟这是这几年第一本完整读完的纸质书，值得纪念一下。&lt;/p&gt;
&lt;h2&gt;什么是克拉拉&lt;/h2&gt;
&lt;p&gt;克拉拉是一个专为陪伴儿童而设计的太阳能人工智能机器人，具有极高的观察、推理与共情能力。在石黑一雄的采访中，他有提到很关注甚至担忧人工智能的发展，但我个人认为人类要理解&lt;a href=&quot;https://yoshuabengio.org/research/&quot;&gt;产生智力的机制&lt;/a&gt;这一关键因素才有可能生产出有共情能力的机器人，而我们离这一步还有很长的路要走。&lt;/p&gt;
&lt;p&gt;那么显然在书中人类社会已经具备了生产这类机器人的能力，并且还在不断升级，因为克拉拉并不是最新型号的那一批。而且从书的结尾也不难发现，这已经成了一条流水线，从生产到投入商店到折旧回收，已经不足为奇。还有一个很重要的点是这些机器人只会一心一意地为主人着想，百分之百利他。这一点从克拉拉宁可损失自己的机油（类似于人类献血、献器官）也要实现一个并没有证实对克拉拉的病情有帮助的可能可以看出。&lt;/p&gt;
&lt;p&gt;于是回到书中卡帕尔迪先生和乔西一家所争执的点：*人工智能机器人真的可以替代人类吗？*这其实也是作者给读者提出的一个问题，我本人的回答是不可以，译者的后记中有一句话我觉得特别好，这里摘抄出来：&lt;em&gt;正是由于自私的欲望与升华的渴望并存，人类的心中才会充满了矛盾、彷徨与痛苦；没有了自私那下坠的重力，一切崇高、向上的人性也就虚无缥缈得失去了分量。&lt;/em&gt; 而后来卡帕尔迪又去找克里西，想要对她做逆向工程来安抚社会上对人工智能表示担忧的人们，这说明卡帕尔迪自认为人工智能依然是可编程、可推导的，那这和他所说的人工智能可以替代人类是不是矛盾了呢？是不是说明卡帕尔迪内心其实也不觉得可以用一个机器人代替人类，也许只是想赚钱罢了。&lt;/p&gt;
&lt;h2&gt;什么是太阳&lt;/h2&gt;
&lt;p&gt;回到这本书上，我是在一个沐浴着午后的阳光的图书馆里读完的这本书，同时身边可能还充斥着很多新冠阳性病人，那么这本书里的太阳是什么呢？&lt;/p&gt;
&lt;p&gt;天真的克拉拉（人工智能机器人）相信太阳有神奇的力量，可以治愈疾病，而实际上乔西也确实在沐浴阳光后渐渐好转，这奠定了这是一本童话的基础，因为众所周知太阳并不能治愈疾病。然而对于克拉拉来说，
太阳可以为其提供能量，所以对她来说太阳就是她心中的上帝，类似于人类社会中基督教的上帝，或者佛教的如来等。所以当我们去寺庙或者在胸口画十字架的时候，我们是否也很天真呢？&lt;/p&gt;
&lt;p&gt;当然，除了物理意义上的太阳，还有一个很重要的点，那就是&lt;em&gt;爱&lt;/em&gt;， 不管是克拉拉之于乔西，抑或里克之于乔西，克里西之于乔西，都是&lt;em&gt;爱&lt;/em&gt;，一种如暖阳般温暖我们却又看不见摸不着的东西。&lt;/p&gt;
&lt;p&gt;正是因为这些爱，才有了最后完美的结局。这让我想起了诺兰的《星际穿越》，一部完美地诠释了什么叫做“&lt;em&gt;爱&lt;/em&gt;可以穿越时空”的电影。&lt;/p&gt;
&lt;h2&gt;关于结局&lt;/h2&gt;
&lt;p&gt;我是一个喜欢好的结局但又不希望好的作品就此陷入窠臼的人，这不是出于自认为能看透一切的自负或是受“喜剧的内核是悲剧”之类言论的影响。因为我始终认为好的作品，书或者电影，是需要留给读者和观众一定的想象空间的，类似于“留白”。&lt;/p&gt;
&lt;p&gt;而这个结局，的确让我想到了很多，并不局限于本书。首先是参考石黑一雄的女儿所说，这不是一本可以给孩子看的童话，它太黑暗了，于是我想到了一个大四的时候玩的游戏：《Fran Bow》，也是一个不管从画面还是故事上都十分黑暗的一款游戏，玩家们对这游戏的结局的解读也是各色各样，有人觉得整个过程都是 Fran 幻想出来的，有人觉得最后 Fran 确实去到了一个理想的世界，但就如游戏最后那句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;I still don&apos;t know many things...&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;But one thing I do know...&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;That between guilt and fear...&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;I choose happiness...&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的，你可以选择一个开心的结局，这没有对错。&lt;/p&gt;
&lt;p&gt;所以我也更愿意相信克拉拉陪着乔西度过了童年，圆满完成了自己的使命，在自己的最后时刻幸福地回想着曾经的点点滴滴，这不也是我们作为人类所希望的吗？&lt;/p&gt;
</content:encoded></item><item><title>DRX夺冠有感</title><link>https://blog.kratosmy.uk/posts/league-of-legends-s12/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/league-of-legends-s12/</guid><content:encoded>&lt;h1&gt;S12&lt;/h1&gt;
&lt;p&gt;关于最后总决赛，我不知道为什么大部分人都希望 SKT 夺冠，希望 Faker 重回巅峰，偏偏我希望 DRX 夺冠，因为我昨天看比赛时候的心情和 2017 年 S7 一样, 就像我在第一篇博客里讲的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;所以我觉得我的 2017 年过的并不失败，大概我心中住了一个 Ambition 吧.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Deft&lt;/h2&gt;
&lt;p&gt;他和 Faker 同为麻浦高中的学生，同一年打职业，却在十年里辗转了七支队伍，未曾夺得一冠。&lt;/p&gt;
&lt;p&gt;Deft 曾经也在 EDG 打过，正好那天的解说席上明凯也在，不知道同为追梦人，也同是队友，他心里是什么想法。&lt;/p&gt;
&lt;p&gt;或许他已经释然了，一辈子拿不到冠军其实才是常态，至少努力过就没什么遗憾了。&lt;/p&gt;
&lt;p&gt;赛后采访时 Deft 的一段话我觉得值得记录下来：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;我唯一擅长的只有英雄联盟，如果我不能在我最擅长的事情上取得成功，那我根本不知道我的人生还有什么意义。&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>CMU 15-213 Lab0</title><link>https://blog.kratosmy.uk/posts/cmu_15-213_lab0/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/cmu_15-213_lab0/</guid><content:encoded>&lt;h1&gt;概述&lt;/h1&gt;
&lt;p&gt;利用 C 语言实现一个队列的基本功能，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建队列&lt;/li&gt;
&lt;li&gt;销毁队列&lt;/li&gt;
&lt;li&gt;头部入队&lt;/li&gt;
&lt;li&gt;尾部入队&lt;/li&gt;
&lt;li&gt;头部出队&lt;/li&gt;
&lt;li&gt;获取队列长度&lt;/li&gt;
&lt;li&gt;反转队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心在于每次对队列操作前都要考虑是否为空的情况，保证代码的鲁棒性。&lt;/p&gt;
&lt;h2&gt;头文件&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;stddef.h&amp;gt;

/* element struct in queue */
typedef struct list_ele {
    char *value;
    struct list_ele *next;
} list_ele_t;

typedef struct {
    list_ele_t *head;
    list_ele_t *tail;
    int size; // use the above two variable to record the size of the queue to avoid traversal
} queue_t;

/* Create empty queue. */
queue_t *queue_new(void);

/* Free ALL storage used by queue. */
void queue_free(queue_t *q);

/* Attempt to insert element at head of queue. */
bool queue_insert_head(queue_t *q, const char *s);

/* Attempt to insert element at tail of queue. */
bool queue_insert_tail(queue_t *q, const char *s);

/* Attempt to remove element from head of queue. */
bool queue_remove_head(queue_t *q, char *sp, size_t bufsize);

/* Return number of elements in queue. */
size_t queue_size(queue_t *q);

/* Reverse elements in queue */
void queue_reverse(queue_t *q);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，在源文件的基础上，新增了尾节点和队列大小两个属性，当然也可以不加，但如果没有这两个变量，计算队列大小或者进行尾部入队操作的时间复杂度就不是常量了，而是线性增长的。&lt;/p&gt;
&lt;p&gt;下面我们具体看每个函数的实现。&lt;/p&gt;
&lt;h2&gt;创建队列&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Allocates a new queue
 * @return The new queue, or NULL if memory allocation failed
 */
queue_t *queue_new(void) {
    queue_t *q = malloc(sizeof(queue_t));
    /* What if malloc returned NULL? */
    if (q == NULL) {
        return NULL;
    } else {
        q-&amp;gt;head = NULL;
        q-&amp;gt;tail = NULL;
        q-&amp;gt;size = 0;
        return q;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这一步没什么问题，主要就是分配队列空间并初始化队列的各个属性。&lt;/p&gt;
&lt;h2&gt;销毁队列&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Frees all memory used by a queue
 * @param[in] q The queue to free
 */
void queue_free(queue_t *q) {
    /* How about freeing the list elements and the strings? */
    /* Free queue structure */
    if (q == NULL) {
        return;
    } else {
        list_ele_t *tmp;
        while (q-&amp;gt;head != NULL) {
            tmp = q-&amp;gt;head;
            q-&amp;gt;head = q-&amp;gt;head-&amp;gt;next;
            free(tmp-&amp;gt;value); // free element&apos;s value
            free(tmp) // free element itself
        }
    }
    free(q); // free queue
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如上所述，判断完队列是否为空，还需要判断队列的属性是否为空。&lt;/p&gt;
&lt;h2&gt;头部入队&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Attempts to insert an element at head of a queue
 *
 * This function explicitly allocates space to create a copy of `s`.
 * The inserted element points to a copy of `s`, instead of `s` itself.
 *
 * @param[in] q The queue to insert into
 * @param[in] s String to be copied and inserted into the queue
 *
 * @return true if insertion was successful
 * @return false if q is NULL, or memory allocation failed
 */
bool queue_insert_head(queue_t *q, const char *s) {
    list_ele_t *newh;
    /* What should you do if the q is NULL? */
    if (q == NULL) {
        return false;
    }
    /* Don&apos;t forget to allocate space for the string and copy it */
    /* What if either call to malloc returns NULL? */
    newh = malloc(sizeof(list_ele_t));
    if (newh == NULL) {
        return false;
    } else {
        newh-&amp;gt;value = malloc(sizeof(char) * (strlen(s) + 1));
        if (newh-&amp;gt;value == NULL) {
            free(newh); // must free the space if malloc failed
            return false;
        } else {
            strcpy(newh-&amp;gt;value, s);
            newh-&amp;gt;next = q-&amp;gt;head;
            q-&amp;gt;head = newh;

            if (q-&amp;gt;tail == NULL) {
                q-&amp;gt;tail = newh;
            }
            ++q-&amp;gt;size;
            return true;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了判断队列及队列元素是否为空，还要判断&lt;code&gt;malloc()&lt;/code&gt;是否成功，
正常来讲，内存分配成功的话，会返回一个可以指向任意类型的指针，但该指针必须通过&lt;code&gt;free()&lt;/code&gt;或者&lt;code&gt;realloc()&lt;/code&gt;回收。
如果分配失败了，会返回一个空指针，我们需要对其进行判断。&lt;/p&gt;
&lt;h2&gt;尾部入队&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Attempts to insert an element at tail of a queue
 *
 * This function explicitly allocates space to create a copy of `s`.
 * The inserted element points to a copy of `s`, instead of `s` itself.
 *
 * @param[in] q The queue to insert into
 * @param[in] s String to be copied and inserted into the queue
 *
 * @return true if insertion was successful
 * @return false if q is NULL, or memory allocation failed
 */
bool queue_insert_tail(queue_t *q, const char *s) {
    /* You need to write the complete code for this function */
    /* Remember: It should operate in O(1) time */
    list_ele_t *newt;
    /* What should you do if the q is NULL? */
    if (q == NULL) {
        return false;
    }
    /* Don&apos;t forget to allocate space for the string and copy it */
    /* What if either call to malloc returns NULL? */
    newt = malloc(sizeof(list_ele_t));
    if (newt == NULL) {
        return false;
    } else {
        newt-&amp;gt;value = malloc(sizeof(char) * (strlen(s) + 1));
        if (newt-&amp;gt;value == NULL) {
            free(newt);
            return false;
        } else {
            strcpy(newt-&amp;gt;value, s);
            newt-&amp;gt;next = NULL;

            if (q-&amp;gt;tail != NULL) {
                q-&amp;gt;tail-&amp;gt;next = newt;
                q-&amp;gt;tail = newt;
            } else {
                q-&amp;gt;head = newt;
                q-&amp;gt;tail = newt;
            }
            ++q-&amp;gt;size;
            return true;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这一步和头部入队类似，不同点在于需要对尾节点是否存在进行判断，而头部入队时是不需要判断头节点是否存在的，因为必然要进行重新分配且不需要对其执行查找下一个节点的操作。&lt;/p&gt;
&lt;h2&gt;头部出队&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Attempts to remove an element from head of a queue
 *
 * If removal succeeds, this function frees all memory used by the
 * removed list element and its string value before returning.
 *
 * If removal succeeds and `buf` is non-NULL, this function copies up to
 * `bufsize - 1` characters from the removed string into `buf`, and writes
 * a null terminator &apos;\0&apos; after the copied string.
 *
 * @param[in]  q       The queue to remove from
 * @param[out] buf     Output buffer to write a string value into
 * @param[in]  bufsize Size of the buffer `buf` points to
 *
 * @return true if removal succeeded
 * @return false if q is NULL or empty
 */
bool queue_remove_head(queue_t *q, char *buf, size_t bufsize) {
    if (q == NULL) {
        return false;
    }
    if (q-&amp;gt;head == NULL) {
        return false;
    } else {
        list_ele_t *temp = q-&amp;gt;head;
        q-&amp;gt;head = q-&amp;gt;head-&amp;gt;next;
        if (buf != NULL) {
            strncpy(buf, temp-&amp;gt;value, bufsize - 1);
            buf[bufsize - 1] = &apos;\0&apos;;
        }
        free(temp-&amp;gt;value);
        free(temp);
        --q-&amp;gt;size;
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里注意一下&lt;code&gt;strncpy&lt;/code&gt;的用法就好了，要保证&lt;code&gt;buf&lt;/code&gt;是 C-Style 的字符数组。&lt;/p&gt;
&lt;h2&gt;获取队列长度&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Returns the number of elements in a queue
 *
 * This function runs in O(1) time.
 *
 * @param[in] q The queue to examine
 *
 * @return the number of elements in the queue, or
 *         0 if q is NULL or empty
 */
size_t queue_size(queue_t *q) {
    /* You need to write the code for this function */
    /* Remember: It should operate in O(1) time */
    if (q == NULL) {
        return 0;
    } else {
        return q-&amp;gt;size;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这没什么好说的，在前面执行入队、出队的时候不要忘记修改&lt;code&gt;size&lt;/code&gt;的值就可以，这里只需要直接返回，而不需要通过遍历队列的方式去计算。&lt;/p&gt;
&lt;h2&gt;反转队列&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;/**
 * @brief Reverse the elements in a queue
 *
 * This function does not allocate or free any list elements, i.e. it does
 * not call malloc or free, including inside helper functions. Instead, it
 * rearranges the existing elements of the queue.
 *
 * @param[in] q The queue to reverse
 */
void queue_reverse(queue_t *q) {
    /* You need to write the code for this function */
    if (q == NULL || q-&amp;gt;head == NULL) {
        return;
    } else {
        list_ele_t *oldHead = q-&amp;gt;head;
        list_ele_t *oldTail = q-&amp;gt;tail;

        list_ele_t *temp = q-&amp;gt;head;
        list_ele_t *prev = NULL;
        list_ele_t *next = NULL;
        while (temp != NULL) {
            next = temp-&amp;gt;next;
            temp-&amp;gt;next = prev;
            prev = temp;
            temp = next;
        }
        q-&amp;gt;head = oldTail;
        q-&amp;gt;tail = oldHead;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经典的反转链表，这里就不赘述了。&lt;/p&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;p&gt;一共是提供了十五组测试用例，满分一百，包括了对各个函数及其性能的测试(测试尾部入队 10000 个元素)，还有鲁棒性测试（释放空队列的空间，从空队列中移除头部元素等），还是比较全面的。&lt;/p&gt;
</content:encoded></item><item><title>实现一个简易的C++ String类</title><link>https://blog.kratosmy.uk/posts/simple-string/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/simple-string/</guid><content:encoded>&lt;h1&gt;概述&lt;/h1&gt;
&lt;p&gt;实现 String 类的核心就是重写构造器和重载运算符.&lt;/p&gt;
&lt;h2&gt;头文件&lt;/h2&gt;
&lt;p&gt;我们需要定义的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Original Constructor&lt;/li&gt;
&lt;li&gt;Copy Constructor&lt;/li&gt;
&lt;li&gt;Move Constructor&lt;/li&gt;
&lt;li&gt;Copy Assignment&lt;/li&gt;
&lt;li&gt;Move Assignment&lt;/li&gt;
&lt;li&gt;Destructor&lt;/li&gt;
&lt;li&gt;Indexer&lt;/li&gt;
&lt;li&gt;Equal/NotEqual Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#ifndef CAMILLE_STRING_H
#define CAMILLE_STRING_H

// using char to store
class String {
  char* str;

public:
  String(const char* s = &amp;quot;&amp;quot;);
  String(const String&amp;amp;); // copy constructor
  String&amp;amp; operator=(const String&amp;amp;); // copy assignment
  String(String &amp;amp;&amp;amp;) noexcept ; // move constructor
  String&amp;amp; operator=(String&amp;amp;&amp;amp;) noexcept ; // move assignment
  ~String(); // destructor
  operator const char* ();
  String operator+(const String&amp;amp;);
  String &amp;amp;operator+=(const String&amp;amp;);
  char operator[](int) const;
  char &amp;amp;operator[](int);
  String operator()(int, int);
  bool operator==(const String&amp;amp;);
  bool operator!=(const String&amp;amp;);
};

#endif

&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>实现一个简易Shell</title><link>https://blog.kratosmy.uk/posts/simple-shell/</link><guid isPermaLink="true">https://blog.kratosmy.uk/posts/simple-shell/</guid><content:encoded>&lt;h1&gt;概述&lt;/h1&gt;
&lt;p&gt;根据 Stephen Brennan 的 Tutorial 实现的一个简易的 Shell.&lt;/p&gt;
&lt;h2&gt;一个 Shell 的生命周期&lt;/h2&gt;
&lt;p&gt;一个 Shell 的生命周期包括三个基本部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化： Shell 读取并执行配置文件；&lt;/li&gt;
&lt;li&gt;转译： Shell 读取标准输入（交互式输入或者文件）并执行；&lt;/li&gt;
&lt;li&gt;终止： 命令执行完毕，Shell 执行结束命令，释放内存并终止；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此， 我们可以得到主函数的基本结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;int main() {
  ls_loop();
  return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Shell 中的基本循环&lt;/h2&gt;
&lt;p&gt;循环分三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读： 读取标准输入的指令；&lt;/li&gt;
&lt;li&gt;解析： 将输入的命令字符串分割成程序和参数；&lt;/li&gt;
&lt;li&gt;执行： 运行解析好的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们可以得到循环体内的基本逻辑：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;void lsh_loop(void)
{
  char *line;
  char **args;
  int status;

  do {
    printf(&amp;quot;&amp;gt; &amp;quot;);
    line = lsh_read_line();
    args = lsh_split_line(line);
    status = lsh_execute(args);

    free(line);
    free(args);
  } while (status);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;内置命令&lt;/h2&gt;
&lt;p&gt;为什么需要内置命令呢？以&lt;code&gt;cd&lt;/code&gt;命令为例，它的作用是改变目录，那么如果 Shell 将该命令交给子进程去执行，那么
就只能改变子进程的目录，对于用户来说等于什么都没做，这显然不是我们想要的结果。所以需要将此类命令作为内置命令实现。&lt;/p&gt;
&lt;h2&gt;完整实现&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/wait.h&amp;gt;

#define LSH_RL_BUF_SIZE 1024
char *lsh_read_line_old(void) {
  int buf_size = LSH_RL_BUF_SIZE;
  int position = 0;
  char *buffer = malloc(sizeof(char) * buf_size);
  int c;

  if (!buffer) {
    fprintf(stderr, &amp;quot;lsh: allocation error\n&amp;quot;);
    exit(EXIT_FAILURE);
  }

  while (1) {
    // Read a character
    c = getchar();

    // if we hit EOF, replace it with a null character and return
    if (c == EOF || c == &apos;\n&apos;) {
        buffer[position] = &apos;\0&apos;;
        return buffer;
    } else {
        buffer[position] = c;
    }
    position++;

    // if we have exceeded the buffer, reallocate
    if (position &amp;gt;= buf_size) {
        buf_size += LSH_RL_BUF_SIZE;
        buffer = realloc(buffer, buf_size);
        if (!buffer) {
            fprintf(stderr, &amp;quot;lsh: allocation error\n&amp;quot;);
            exit(EXIT_FAILURE);
        }
    }
  }
}

char *lsh_read_line_new(void) {
    char* line = NULL;
    ssize_t buf_size = 0; // have getline allocate a buffer for us

    if (getline(&amp;amp;line, &amp;amp;buf_size, stdin) == -1) {
        if (feof(stdin)) {
            exit(EXIT_SUCCESS); // we received an EOF
        } else {
            perror(&amp;quot;readline&amp;quot;);
            exit(EXIT_FAILURE);
        }
    }
    return line;
}

#define LSH_TOK_BUF_SIZE 64
#define LSH_TOK_DELIM &amp;quot; \t\r\n\a&amp;quot;
char **lsh_split_line(char *line) {
    int buf_size = LSH_TOK_BUF_SIZE, position = 0;
    char **tokens = malloc(buf_size * sizeof(char*));
    char *token;

    if (!tokens) {
        fprintf(stderr, &amp;quot;lsh: allocation error\n&amp;quot;);
        exit(EXIT_FAILURE);
    }

    token = strtok(line, LSH_TOK_DELIM);
    while (token != NULL) {
        tokens[position] = token;
        position++;

        if (position &amp;gt;= buf_size) {
            buf_size += LSH_RL_BUF_SIZE;
            tokens = realloc(tokens, buf_size * sizeof(char*));
            if (!tokens) {
                fprintf(stderr, &amp;quot;lsh: allocation error\n&amp;quot;);
                exit(EXIT_FAILURE);
            }
        }

        token = strtok(NULL, LSH_TOK_DELIM);
    }
    tokens[position] = NULL;
    return tokens;
}

int lsh_launch(char** args) {
    pid_t pid, wpid;
    int status;

    pid = fork();
    if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror(&amp;quot;lsh child process execute error!&amp;quot;);
        }
        exit(EXIT_FAILURE);
    } else if (pid &amp;lt; 0) {
        // Error in forking
        perror(&amp;quot;lsh fork error!&amp;quot;);
    } else {
        // Parent process
        do {
            wpid = waitpid(pid, &amp;amp;status, WUNTRACED);
        } while (!WIFEXITED(status) &amp;amp;&amp;amp; !WIFSIGNALED(status));
    }
    return 1;
}

/*
 * Function declaration for builtin shell commands:
 */
int lsh_cd(char **args);
int lsh_help(char **args);
int lsh_exit(char **args);

/*
 * List of builtin commands, followed by their corresponding functions.
 */
char* builtin_str[] = {
        &amp;quot;cd&amp;quot;,
        &amp;quot;help&amp;quot;,
        &amp;quot;exit&amp;quot;
};

int (*builtin_func[]) (char**) = {
        &amp;amp;lsh_cd,
        &amp;amp;lsh_help,
        &amp;amp;lsh_exit
};

int lsh_num_builtins() {
    return sizeof(builtin_str) / sizeof(char*);
}

/*
 * Builtin function implementation
 */
int lsh_cd(char** args) {
    if (args[1] == NULL) {
        fprintf(stderr, &amp;quot;lsh: expected argument to \&amp;quot;cd\&amp;quot;\n&amp;quot;);
    } else {
        if (chdir(args[1]) != 0) {
            perror(&amp;quot;lsh change directory error!&amp;quot;);
        }
    }
    return 1;
}

int lsh_help(char** args) {
    int i;
    printf(&amp;quot;LSH from scratch\n&amp;quot;);
    printf(&amp;quot;Type program names and arguments, and hit enter.\n&amp;quot;);
    printf(&amp;quot;The following are built in:\n&amp;quot;);

    for (i = 0; i &amp;lt; lsh_num_builtins(); i++) {
        printf(&amp;quot; %s\n&amp;quot;, builtin_str[i]);
    }

    printf(&amp;quot;Use the man command for information and other programs.\n&amp;quot;);
    return 1;
}

int lsh_exit(char** args) {
    return 0;
}

int lsh_execute(char **args) {
    int i;
    if (args[0] == NULL) {
        // An empty command was entered.
        return 1;
    }
    // Find the matched builtin command and execute it
    for (i = 0; i &amp;lt; lsh_num_builtins(); i++) {
        if (strcmp(args[0], builtin_str[i]) == 0) {
            return (*builtin_func[i])(args);
        }
    }
    return lsh_launch(args);
}

void ls_loop(void) {
    char *line;
    char **args;
    int status;

    do {
        printf(&amp;quot;&amp;gt; &amp;quot;);
        line = lsh_read_line_new();
        args = lsh_split_line(line);
        status = lsh_execute(args);
    } while (status);
}

int main() {
  ls_loop();
  return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item></channel></rss>